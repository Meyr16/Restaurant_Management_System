from machine import Pin,PWM
import time

# Übergabe Variablen für GUI

TISCH_xxx_SERVIVE_ERLEDIGT = False
TISCH_xxx_RECHNUNG_ERLEDIGT = False
TISCH_xxx_GESEHEN = False
TISCH_xxx_RESERVIERT = False
TISCH_xxx_BELEGT = False

SERVICE_ERWÜNSCHT = False
RECHNUNG_ERWÜNSCHT = False

# --- Konfiguration der GPIO-Pins ---
PIN_SERVICE_BUTTON = 14     # Pin 14 für "Service"
PIN_RECHNUNG_BUTTON = 15    # Pin 15 für "Rechnung"

# --- Pin-Initialisierung ---
# EingangsPinns konfigurieren
button_service = Pin(PIN_SERVICE_BUTTON, Pin.IN, Pin.PULL_DOWN)
button_rechnung = Pin(PIN_RECHNUNG_BUTTON, Pin.IN, Pin.PULL_DOWN)


# Entprellzeit in Sekunden (für beide Taster)
DEBOUNCE_TIME = 0.2 

# --- Variablen zur Zählung ---
service_erwuenscht_zaehler = 0
rechnung_erwuenscht_zaehler = 0


print("Programm gestartet. Warte auf Tasterdruck...")
print(f"Service Zähler: {service_erwuenscht_zaehler}, Rechnung Zähler: {rechnung_erwuenscht_zaehler}")


class RGBLED:
    # Vordefinierte Farben als statische Dictionary-Variable der Klasse
    # Die Werte sind Tupel (Rot, Grün, Blau) im Bereich 0-255 (für 8-Bit RGB)
        COLORS = {
            "OFF":      (0,   0,   0),
            "RED":      (255, 0,   0),
            "GREEN":    (0,   255, 0),
            "BLUE":     (0,   0,   255),
            "YELLOW":   (255, 255, 0),
            "CYAN":     (0,   255, 255),
            "MAGENTA":  (255, 0,   255),
            "WHITE":    (255, 255, 255),
            "ORANGE":   (255, 128, 0),
            "PURPLE":   (128, 0,   128),
            "LIGHT_BLUE": (128, 128, 255),
        }

        def __init__(self, pin_r, pin_g, pin_b, pwm_freq=5000, common_anode=False):
            self.common_anode = common_anode  # True, wenn gemeinsame Anode verwendet wird
            
            self.pwm_freq = pwm_freq

            # Initialisiere PWM-Objekte für jeden Farbkanal
            self.pwm_r = PWM(Pin(pin_r))
            self.pwm_g = PWM(Pin(pin_g))
            self.pwm_b = PWM(Pin(pin_b))

            # Setze die PWM-Frequenz für alle Kanäle
            self.pwm_r.freq(self.pwm_freq)
            self.pwm_g.freq(self.pwm_freq)
            self.pwm_b.freq(self.pwm_freq)

            # Sicherstellen, dass alle LEDs am Anfang aus sind
            self.set_color_rgb(0, 0, 0)

        def _map_value(self, value):
            pwm_val = int(value * 65535 / 255)
            return 65535 - pwm_val if self.common_anode else pwm_val
            
        def set_color_rgb(self, r, g, b):

            self.pwm_r.duty_u16(self._map_value(r))
            self.pwm_g.duty_u16(self._map_value(g))
            self.pwm_b.duty_u16(self._map_value(b))

        def set_color_by_name(self, color_name):

            color_name = color_name.upper() # Namen in Großbuchstaben umwandeln
            if color_name in self.COLORS:
                r, g, b = self.COLORS[color_name]
                self.set_color_rgb(r, g, b)
            else:
                print(f"Fehler: Farbe '{color_name}' nicht definiert.")
                print(f"Verfügbare Farben: {', '.join(self.COLORS.keys())}")

        def turn_off(self):
            self.set_color_rgb(0, 0, 0) # Entspricht OFF

        def __del__(self):
            """
            Wird aufgerufen, wenn das Objekt gelöscht wird.
            Deinitialisiert die PWM-Pins, um Ressourcen freizugeben.
            """
            self.pwm_r.deinit()
            self.pwm_g.deinit()
            self.pwm_b.deinit()

my_rgb_led = RGBLED(pin_r=11, pin_g=13, pin_b=12, common_anode=False)
my_rgb_led.set_color_by_name("OFF")  

print(f"DEBUG: SERVICE_ERWÜNSCHT: {SERVICE_ERWÜNSCHT}")
print(f"DEBUG: RECHNUNG_ERWÜNSCHT: {RECHNUNG_ERWÜNSCHT}")
print(f"DEBUG: Tisch_xxx_RESERVIERT: {TISCH_xxx_RESERVIERT}") 
print(f"DEBUG: TISCH_xxx_BELEGT: {TISCH_xxx_BELEGT}")
print(f"DEBUG: TISCH_xxx_SERVIVE_ERLEDIGT: {TISCH_xxx_SERVIVE_ERLEDIGT}")

while True:
   
    irgendein_taster_gedrueckt = False

    if button_service.value(): 
        service_erwuenscht_zaehler += 1
        print(f"Service erwünscht! Neuer Zählerstand: {service_erwuenscht_zaehler}")
        irgendein_taster_gedrueckt = True
        SERVICE_ERWÜNSCHT = True
        
        start_time = time.time()
        while button_service.value() and (time.time() - start_time) < DEBOUNCE_TIME:
            time.sleep(0.01) 
        
        while button_service.value():
            time.sleep(0.01)

    if button_rechnung.value(): 
        rechnung_erwuenscht_zaehler += 1
        print(f"Rechnung erwünscht! Neuer Zählerstand: {rechnung_erwuenscht_zaehler}")
        irgendein_taster_gedrueckt = True
        RECHNUNG_ERWÜNSCHT = True
        
        # Entprellen: Warte, bis der Taster losgelassen wird ODER die maximale Entprellzeit abgelaufen ist
        start_time = time.time()
        while button_rechnung.value() and (time.time() - start_time) < DEBOUNCE_TIME:
            time.sleep(0.01)
        
        while button_rechnung.value():
            time.sleep(0.01)

   # LED-Farben setzen basierend auf den Zählerständen

    if SERVICE_ERWÜNSCHT or RECHNUNG_ERWÜNSCHT:
        my_rgb_led.set_color_by_name("ORANGE")  
    elif TISCH_xxx_RESERVIERT:
        my_rgb_led.set_color_by_name("RED")     
    elif TISCH_xxx_BELEGT:
        my_rgb_led.set_color_by_name("GREEN")  
    elif TISCH_xxx_SERVIVE_ERLEDIGT: 
        my_rgb_led.set_color_by_name("GREEN")   
    else:
        my_rgb_led.set_color_by_name("OFF") 
    
    if service_erwuenscht_zaehler == 0:
        SERVICE_ERWÜNSCHT = False

    if rechnung_erwuenscht_zaehler == 0:      
        RECHNUNG_ERWÜNSCHT = False

    time.sleep(0.05) # Kurze Pause in der Hauptschleife


